apiVersion: v1
kind: Service
metadata:
  name: cigo-kafka
  labels:
    app: cigo-kafka
spec:
  ports:
  - name: "internal"
    port: 29092
    targetPort: 29092
  clusterIP: None
  selector:
    app: cigo-kafka
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: cigo-kafka
  name: cigo-kafka
spec:
  selector:
    matchLabels:
      app: cigo-kafka 
  serviceName: cigo-kafka
  replicas: 3
  template:
    metadata:
      labels:
        app: cigo-kafka
    spec:
      containers:
      - env:
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_LISTERNER_PORT
          value: "29092"
        - name: KAFKA_EXTERNAL_LISTERNER_PORT
          value: "29192"
        - name: ZOOKEEPER_REPLICA_COUNT
          value: "3"
        - name: ZOOKEEPER_PORT
          value: "32181"
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data/topics"
          #- name: KAFKA_EXTERNAL_BROKER_HOST_NAMES
          #  value: "eos1.ac.upc.edu eos1.ac.upc.edu eos1.ac.upc.edu"
        image: sparsitytechnologies/cigo-kafka:latest
        name: kafka
        ports:
        - containerPort: 29092
        - containerPort: 29192
        resources: {}
        imagePullPolicy: Always
        volumeMounts:
          - name: config
            mountPath: /etc/kafka
          - name: data
            mountPath: /var/lib/kafka/data
      restartPolicy: Always
      volumes:
        - name: config
          emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: "standard" 
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 30Gi
